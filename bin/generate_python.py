#! /usr/bin/env python3

"""
Used to generate python/szerror.py
"""

import json
import logging
import os
from datetime import datetime, timezone

INPUT_FILE = "szerrors.json"
OUTPUT_FILE = "python/szerror.py"
PAD_CLASS = 35


def spaces_not_tabs():
    """Because tabs are used in OUTPUT_HEADER, linters get confused with spaces vs. tabs.  This solves it."""


# -----------------------------------------------------------------------------
# --- Main
# -----------------------------------------------------------------------------

# Set up logging.

logging.basicConfig(format="%(asctime)s %(message)s", level=logging.INFO)

logging.info("-" * 80)
logging.info("--- %s - Begin", os.path.basename(__file__))
logging.info("-" * 80)

# Create multi-line strings for output.

OUTPUT_HEADER = '''#! /usr/bin/env python3
"""
DO NOT EDIT.  This code is generated.
Generated by: sz-sdk-errors/bin/generate_python.py
Generated for: sz-sdk-python/src/senzing/szerror.py
'''

OUTPUT_HEADER += f"Generated date: {datetime.now(timezone.utc).isoformat()}\n"
OUTPUT_HEADER += '"""'
OUTPUT_HEADER += '''
# Metadata

__all__ = [
    "ENGINE_EXCEPTION_MAP",
    "SzBadInputError",
    "SzConfigurationError",
    "SzDatabaseConnectionLostError",
    "SzDatabaseError",
    "SzDatabaseTransientError",
    "SzError",
    "SzLicenseError",
    "SzNotFoundError",
    "SzNotInitializedError",
    "SzReplaceConflictError",
    "SzRetryableError",
    "SzSdkError",
    "SzRetryTimeoutExceededError",
    "SzUnhandledError",
    "SzUnknownDataSourceError",
    "SzUnrecoverableError",
]
__version__ = "0.0.1"  # See https://www.python.org/dev/peps/pep-0396/
__date__ = "2023-10-30"
__updated__ = "2025-02-01"


# -----------------------------------------------------------------------------
# Base SzError
# -----------------------------------------------------------------------------


class SzError(Exception):
    """Base exception for Sz related python code."""


# -----------------------------------------------------------------------------
# Category exceptions
# - These exceptions represent categories of actions that can be taken by
#   the calling program.
# -----------------------------------------------------------------------------


class SzBadInputError(SzError):
    """The user-supplied input contained an error."""


class SzGeneralError(SzError):
    """Errors that are not bad input, retryable, or unrecoverable."""


class SzRetryableError(SzError):
    """The program can provide a remedy and continue."""


class SzUnrecoverableError(SzError):
    """System failure, can't continue."""


# -----------------------------------------------------------------------------
# Detail exceptions for SzBadInputError
# - Processing did not complete.
# - These exceptions are "per record" exceptions.
# - The record should be recorded as "bad".  (logged, queued as failure)
# - Processing may continue.
# -----------------------------------------------------------------------------


class SzNotFoundError(SzBadInputError):
    """Not found"""


class SzUnknownDataSourceError(SzBadInputError):
    """Unknown DataSource"""


# -----------------------------------------------------------------------------
# Detail exceptions for SzGeneralError
# - Processing did not complete.
# - These exceptions are "per record" exceptions.
# - The record should be recorded as "bad".  (logged, queued as failure)
# - Processing may continue.
# -----------------------------------------------------------------------------


class SzConfigurationError(SzGeneralError):
    """The program can provide a remedy and continue."""


class SzReplaceConflictError(SzGeneralError):
    """The program can provide a remedy and continue."""


class SzSdkError(SzGeneralError):
    """An error discovered by the SDK, not the underlying C binary."""


# -----------------------------------------------------------------------------
# Detail exceptions for SzRetryableError
# - Processing did not complete.
# - These exceptions may be remedied programmatically.
# - The call to the Senzing method should be retried.
# - Processing may continue.
# -----------------------------------------------------------------------------


class SzDatabaseConnectionLostError(SzRetryableError):
    """Database connection lost"""


class SzDatabaseTransientError(SzRetryableError):
    """Database connection lost"""


class SzRetryTimeoutExceededError(SzRetryableError):
    """Retry timeout exceeded time limit"""


# -----------------------------------------------------------------------------
# Detail exceptions for SzUnrecoverableError
# - Processing did not complete.
# - These exceptions cannot be remedied programmatically.
# - Processing cannot continue.
# -----------------------------------------------------------------------------


class SzDatabaseError(SzUnrecoverableError):
    """Database exception"""


class SzLicenseError(SzUnrecoverableError):
    """Licence exception"""


class SzNotInitializedError(SzUnrecoverableError):
    """Not initialized"""


class SzUnhandledError(SzUnrecoverableError):
    """Could not handle exception"""


# -----------------------------------------------------------------------------
# Determine Exception based on Senzing reason code.
# Reference: https://senzing.zendesk.com/hc/en-us/articles/360026678133-Engine-Error-codes
# -----------------------------------------------------------------------------

# fmt: off
ENGINE_EXCEPTION_MAP = {
'''  # noqa: E101, W191


OUTPUT_FOOTER = """}
# fmt: on
"""  # noqa: E101,F541,W191

with open(INPUT_FILE, encoding="utf-8") as input_file:
    errors = json.load(input_file)

with open(OUTPUT_FILE, "w", encoding="utf-8") as file:
    file.write(OUTPUT_HEADER)
    for error_number, error_data in errors.items():
        OUTPUT_LINE = ""
        error_class = error_data.get("class")
        if error_class:
            OUTPUT_LINE = f"    {error_number}: {error_class},"
            error_name = error_data.get("name")
            error_comment = error_data.get("comment")
            if error_name or error_comment:
                pad_class_len = len(error_number) + len(error_class)
                OUTPUT_LINE += (
                    " " * (PAD_CLASS - pad_class_len)
                ) + f'  # {error_name:<85} "{error_comment}"'
        if len(OUTPUT_LINE) > 0:
            OUTPUT_LINE += "\n"
            file.write(OUTPUT_LINE)
    file.write(OUTPUT_FOOTER)

# Epilog.

logging.info("-" * 80)
logging.info("--- %s - End", os.path.basename(__file__))
logging.info("-" * 80)
