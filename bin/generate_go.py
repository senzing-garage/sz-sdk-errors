#! /usr/bin/env python3

"""
Used to generate go/main.go
"""

import json
import logging
import os
from datetime import datetime, timezone

INPUT_FILE = "szerrors.json"
OUTPUT_FILE = "go/szerrortypes.go"


def spaces_not_tabs():
    """Because tabs are used in OUTPUT_HEADER, linters get confused with spaces vs. tabs.  This solves it."""


# -----------------------------------------------------------------------------
# --- Main
# -----------------------------------------------------------------------------

# Set up logging.

logging.basicConfig(format="%(asctime)s %(message)s", level=logging.INFO)

logging.info("-" * 80)
logging.info("--- %s - Begin", os.path.basename(__file__))
logging.info("-" * 80)

# Create multi-line strings for output.

OUTPUT_HEADER = """// DO NOT EDIT.  This code is generated.
// Generated by: sz-sdk-errors/bin/generate_go.py
// Generated for: sz-sdk-go/szerror/szerrortypes.go
"""

OUTPUT_HEADER += f"// Generated date: {datetime.now(timezone.utc).isoformat()}\n"

# noqa: E101
OUTPUT_HEADER += """
package szerror

/*
Map of Senzing error code to corresponding error type.
*/
var SzErrorTypes = map[int][]TypeIDs{
	0:    {SzError},
"""  # noqa: E101, W191

OUTPUT_FOOTER = "}"

with open(INPUT_FILE, encoding="utf-8") as input_file:
    errors = json.load(input_file)

with open(OUTPUT_FILE, "w", encoding="utf-8") as file:
    file.write(OUTPUT_HEADER)
    for error_number, error_data in errors.items():
        OUTPUT_LINE = ""
        error_class = error_data.get("class")
        if error_class:
            CLASS_VARIABLE = error_class
            match CLASS_VARIABLE:
                case "SzBadInputError":
                    CLASS_VARIABLE += ", SzError"
                case "SzConfigurationError":
                    CLASS_VARIABLE += ", SzGeneralError, SzError"
                case "SzDatabaseError":
                    CLASS_VARIABLE += ", SzUnrecoverableError, SzError"
                case "SzDatabaseConnectionLostError":
                    CLASS_VARIABLE += ", SzRetryableError, SzError"
                case "SzDatabaseTransientError":
                    CLASS_VARIABLE += ", SzRetryableError, SzError"
                case "SzGeneralError":
                    CLASS_VARIABLE += ", SzError"
                case "SzLicenseError":
                    CLASS_VARIABLE += ", SzUnrecoverableError, SzError"
                case "SzNotFoundError":
                    CLASS_VARIABLE += ", SzBadInputError, SzError"
                case "SzNotInitializedError":
                    CLASS_VARIABLE += ", SzUnrecoverableError, SzError"
                case "SzReplaceConflictError":
                    CLASS_VARIABLE += ", SzGeneralError, SzError"
                case "SzRetryableError":
                    CLASS_VARIABLE += ", SzError"
                case "SzRetryTimeoutExceededError":
                    CLASS_VARIABLE += ", SzRetryableError, SzError"
                case "SzSdkError":
                    CLASS_VARIABLE += ", SzGeneralError, SzError"
                case "SzUnknownDataSourceError":
                    CLASS_VARIABLE += ", SzBadInputError, SzError"
                case "SzUnhandledError":
                    CLASS_VARIABLE += ", SzUnrecoverableError, SzError"
                case "SzUnrecoverableError":
                    CLASS_VARIABLE += ", SzError"
            OUTPUT_LINE = f"{error_number}: {{{CLASS_VARIABLE}}},"
            error_name = error_data.get("name")
            error_comment = error_data.get("comment")
            if error_name or error_comment:
                OUTPUT_LINE += f" // {error_name} - {error_comment}"
        if len(OUTPUT_LINE) > 0:
            OUTPUT_LINE += "\n"
            file.write(OUTPUT_LINE)
    file.write(OUTPUT_FOOTER)

# Epilog.

logging.info("-" * 80)
logging.info("--- %s} - End", os.path.basename(__file__))
logging.info("-" * 80)
